rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }
    
    function isSignedIn() {
      return request.auth.uid != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.admin;
    }

    function isUser(uid) {
      return request.auth.uid == uid;
    }

		function isPlayer(gameID, gamesTable) {
    	return get(
        /databases/$(database)/documents/$(gamesTable)/$(gameID)
      ).data.config.players.hasAny([null, request.auth.uid]);
    }

		function isSpectator(gameID) {
      let game = get(
        /databases/$(database)/documents/games/$(gameID)
      ).data.config;
    	return game.state.hasEnded || !game.players.hasAny([request.auth.uid]);
    }

    match /names/{name} {
    	allow create: if isSignedIn() && isUser(incomingData().uid);
    	allow read: if isSignedIn();
    	allow update: if false;
      allow delete: if isUser(existingData().uid);
    }

    match /games/{game} {
    	allow read: if isSignedIn();
      allow write: if false;

      match /branches/{branch} {
    	  allow list: if isSignedIn();
    	  allow get: if existingData().uid == null || isUser(existingData().uid);
        allow create: if isUser(incomingData().uid);
        allow update, delete: if isUser(existingData().uid);
      }

      match /playerChat/{message} {
        allow read: if isPlayer(game, "games");
        allow create: if isUser(incomingData().uid);
        allow update, delete: if isUser(existingData().uid) || isAdmin();
      }

      match /spectatorChat/{message} {
        allow read: if isSpectator(game);
        allow create: if isUser(incomingData().uid);
        allow update, delete: if isUser(existingData().uid) || isAdmin();
      }
    }

    match /gamesPrivate/{game} {
    	allow read: if isPlayer(game, "gamesPrivate");
      allow write: if false;

      match /branches/{branch} {
    	  allow read: if isUser(existingData().uid) ||
          existingData().uid == null && isPlayer(game, "gamesPrivate");
        allow create: if isUser(incomingData().uid);
        allow update, delete: if isUser(existingData().uid);
      }

      match /playerChat/{message} {
        allow read: if isPlayer(game, "gamesPrivate");
        allow create: if isUser(incomingData().uid);
        allow update, delete: if isUser(existingData().uid);
      }
    }

    match /analyses/{analysis} {
    	allow read: if isSignedIn();
      allow create: if isUser(incomingData().uid);
      allow update, delete: if isUser(existingData().uid) || isAdmin();

      match /comments/{comment} {
        allow read: if isSignedIn();
        allow create: if isUser(incomingData().uid);
        allow update, delete: if isUser(existingData().uid) || isAdmin();
      }
    }
    
    match /puzzles/{puzzle} {
    	allow read: if isSignedIn();
      allow create: if isUser(incomingData().uid);
      allow update, delete: if isUser(existingData().uid) || isAdmin();

      match /comments/{comment} {
        allow read: if isSignedIn();
        allow create: if isUser(incomingData().uid);
        allow update, delete: if isUser(existingData().uid) || isAdmin();
      }

      match /solutions/{solution} {
    	  allow list: if isSignedIn();
    	  allow get: if existingData().isPublished == true || isUser(existingData().uid);
        allow create: if isUser(incomingData().uid);
        allow update, delete: if isUser(existingData().uid) || isAdmin();

        match /comments/{comment} {
          allow read: if isSignedIn();
          allow create: if isUser(incomingData().uid);
          allow update, delete: if isUser(existingData().uid) || isAdmin();
        }
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
